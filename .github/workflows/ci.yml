name: CI

on:
  push:
    branches: [main]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: short
  OPENSSL_STATIC: true
  PKG_CONFIG_ALLOW_CROSS: true

permissions:
  contents: write

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy

      - name: Install OpenSSL (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install OpenSSL (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl@3
          echo "OPENSSL_DIR=$(brew --prefix openssl@3)" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$(brew --prefix openssl@3)/lib/pkgconfig" >> $GITHUB_ENV

      - name: Install OpenSSL (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install openssl --params='/InstallationPath:C:\OpenSSL\'
          echo "OPENSSL_DIR=C:\OpenSSL" >> $env:GITHUB_ENV
          echo "PKG_CONFIG_PATH=C:\OpenSSL\lib\pkgconfig" >> $env:GITHUB_ENV

      - name: Run tests
        run: cargo test --verbose

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy
      - name: Clippy
        run: cargo clippy -- -D warnings
      - name: Format check
        run: cargo fmt --check

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds using cross
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true

          # Native macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: macos-latest
            target: aarch64-apple-darwin

          # Native Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - uses: actions/checkout@v4

      - name: Install cross (Linux)
        if: matrix.use-cross
        run: cargo install cross

      - name: Setup Rust (Native builds)
        if: ${{ !matrix.use-cross }}
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt,clippy

      - name: Build with cross (Linux)
        if: matrix.use-cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Native build (macOS/Windows)
        if: ${{ !matrix.use-cross }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          staging="yek-${{ matrix.target }}"
          mkdir -p "$staging"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "$staging/"
            7z a "${{ matrix.asset_name }}" "$staging"
          else
            cp "target/${{ matrix.target }}/release/${{ matrix.artifact_name }}" "$staging/"
            tar czf "${{ matrix.asset_name }}" "$staging"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ matrix.asset_name }}

  benchmark:
    name: Benchmark / ${{ matrix.benchmark_group.name }}
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        benchmark_group:
          - group: "SingleFile_ByteMode"
            name: "Single File Byte Mode"
          - group: "SingleFile_ByteMode_Large"
            name: "Single File Byte Mode Large"
          - group: "SingleFile_TokenMode_Large"
            name: "Single File Token Mode Large"
          - group: "MultipleFiles_Small"
            name: "Multiple Files Small"
          - group: "MultipleFiles_Medium"
            name: "Multiple Files Medium"
          - group: "MultipleFiles_Large"
            name: "Multiple Files Large"
          - group: "MultipleFiles_TokenMode"
            name: "Multiple Files Token Mode"
          - group: "CustomConfig"
            name: "Custom Config"
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build benchmarks on target branch
        run: |
          git fetch origin ${{ github.base_ref }}
          git checkout ${{ github.base_ref }}
          cargo bench --bench serialization --no-run

      - name: Run benchmark on target branch
        run: cargo bench --bench serialization -- --save-baseline ${{ github.base_ref }} '${{ matrix.benchmark_group.group }}/'

      - name: Build benchmarks on PR branch
        run: |
          git checkout ${{ github.head_ref }}
          cargo bench --bench serialization --no-run

      - name: Compare benchmarks
        run: |
          cargo bench --bench serialization -- --baseline ${{ github.base_ref }} --noise-threshold 2 '${{ matrix.benchmark_group.group }}/' > benchmark_results.md
          echo "## Benchmark Results for ${{ matrix.benchmark_group.name }}" >> $GITHUB_STEP_SUMMARY
          cat benchmark_results.md >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: criterion-${{ matrix.benchmark_group }}-results
          path: |
            target/criterion/${{ matrix.benchmark_group }}/
            benchmark_results.md
          if-no-files-found: error

  release:
    name: Release
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: "yek-*"

  publish:
    name: Publish
    needs: [test, lint, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: "1.84.0"
      - run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
